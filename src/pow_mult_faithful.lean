import ring_seminorm
import analysis.special_functions.pow
import ring_theory.adjoin.basic

open_locale topological_space


def ring_hom.is_bounded {Œ± : Type*} [semi_normed_ring Œ±] {Œ≤ : Type*} [semi_normed_ring Œ≤] 
  (f : Œ± ‚Üí+* Œ≤) : Prop := ‚àÉ C : ‚Ñù, 0 < C ‚àß ‚àÄ x : Œ±, norm (f x) ‚â§ C * norm x

def ring_hom.is_bounded_wrt {Œ± : Type*} [ring Œ±] {Œ≤ : Type*} [ring Œ≤] (nŒ± : Œ± ‚Üí ‚Ñù) (nŒ≤ : Œ≤ ‚Üí ‚Ñù)
  (f : Œ± ‚Üí+* Œ≤) : Prop :=
‚àÉ C : ‚Ñù, 0 < C ‚àß ‚àÄ x : Œ±, nŒ≤ (f x) ‚â§ C * nŒ± x

lemma contraction_of_is_pm_wrt {Œ± : Type*} [ring Œ±] {Œ≤ : Type*} [ring Œ≤] (nŒ± : ring_seminorm Œ±) 
  {nŒ≤ : Œ≤ ‚Üí ‚Ñù} (hŒ≤ : is_pow_mul nŒ≤) {f : Œ± ‚Üí+* Œ≤} (hf : f.is_bounded_wrt nŒ± nŒ≤) (x : Œ±) : 
  nŒ≤ (f x) ‚â§ nŒ± x :=
begin
  obtain ‚ü®C, hC0, hC‚ü© := hf,
  have hlim : filter.tendsto (Œª n : ‚Ñï, C ^ (1 / (n : ‚Ñù)) * nŒ± x) filter.at_top (ùìù (nŒ± x)),
  { have : (ùìù (nŒ± x)) = (ùìù (1 * (nŒ± x))) := by rw one_mul,
    rw this,
    apply filter.tendsto.mul,
    { apply filter.tendsto.comp _ (tendsto_const_div_at_top_nhds_0_nat 1),
      rw ‚Üê real.rpow_zero C,
      apply continuous_at.tendsto (real.continuous_at_const_rpow (ne_of_gt hC0)), },
    exact tendsto_const_nhds, },
  apply ge_of_tendsto hlim,
  simp only [filter.eventually_at_top, ge_iff_le],
  use 1,
  intros n hn,
  have h : (C^(1/n : ‚Ñù))^n  = C,
  { have hn0 : (n : ‚Ñù) ‚â† 0 := nat.cast_ne_zero.mpr (ne_of_gt hn),
      rw [‚Üê real.rpow_nat_cast, ‚Üê real.rpow_mul (le_of_lt hC0), one_div, inv_mul_cancel hn0,
        real.rpow_one], },
  apply le_of_pow_le_pow n _ hn,
  { rw [mul_pow, h, ‚Üê hŒ≤ _ hn, ‚Üê ring_hom.map_pow], 
    apply le_trans (hC (x^n)),
    rw mul_le_mul_left hC0,
    exact map_pow_le_pow _ _ (nat.one_le_iff_ne_zero.mp hn), },
  { refine mul_nonneg (real.rpow_nonneg_of_nonneg (le_of_lt hC0) _) (map_nonneg _ _), }, 
end

lemma contraction_of_is_pm_wrt' {F : Type*} {Œ± : out_param(Type*)} [ring Œ±] 
  [ring_seminorm_class F Œ±] {Œ≤ : Type*} [ring Œ≤] (nŒ± : F) {nŒ≤ : Œ≤ ‚Üí ‚Ñù} (hŒ≤ : is_pow_mul nŒ≤)
  {f : Œ± ‚Üí+* Œ≤} (hf : f.is_bounded_wrt nŒ± nŒ≤) (x : Œ±) : 
  nŒ≤ (f x) ‚â§ nŒ± x :=
begin
  obtain ‚ü®C, hC0, hC‚ü© := hf,
  have hlim : filter.tendsto (Œª n : ‚Ñï, C ^ (1 / (n : ‚Ñù)) * nŒ± x) filter.at_top (ùìù (nŒ± x)),
  { have : (ùìù (nŒ± x)) = (ùìù (1 * (nŒ± x))) := by rw one_mul,
    rw this,
    apply filter.tendsto.mul,
    { apply filter.tendsto.comp _ (tendsto_const_div_at_top_nhds_0_nat 1),
      rw ‚Üê real.rpow_zero C,
      apply continuous_at.tendsto (real.continuous_at_const_rpow (ne_of_gt hC0)), },
    exact tendsto_const_nhds, },
  apply ge_of_tendsto hlim,
  simp only [filter.eventually_at_top, ge_iff_le],
  use 1,
  intros n hn,
  have h : (C^(1/n : ‚Ñù))^n  = C,
  { have hn0 : (n : ‚Ñù) ‚â† 0 := nat.cast_ne_zero.mpr (ne_of_gt hn),
      rw [‚Üê real.rpow_nat_cast, ‚Üê real.rpow_mul (le_of_lt hC0), one_div, inv_mul_cancel hn0,
        real.rpow_one], },
  apply le_of_pow_le_pow n _ hn,
  { rw [mul_pow, h, ‚Üê hŒ≤ _ hn, ‚Üê ring_hom.map_pow], 
    apply le_trans (hC (x^n)),
    rw mul_le_mul_left hC0,
    exact map_pow_le_pow _ _ (nat.one_le_iff_ne_zero.mp hn), },
  { refine mul_nonneg (real.rpow_nonneg_of_nonneg (le_of_lt hC0) _) (map_nonneg _ _), }, 
end

lemma contraction_of_is_pm {Œ± : Type*} [semi_normed_ring Œ±] {Œ≤ : Type*} [semi_normed_ring Œ≤] 
  (hŒ≤ : is_pow_mul (norm : Œ≤ ‚Üí ‚Ñù)) {f : Œ± ‚Üí+* Œ≤} (hf : f.is_bounded) (x : Œ±) : 
  norm (f x) ‚â§ norm x := 
contraction_of_is_pm_wrt (seminormed_ring.to_ring_seminorm Œ±) hŒ≤ hf x


lemma eq_seminorms  {Œ± : Type*} [ring Œ±] (f : ring_seminorm Œ±) (hfpm : is_pow_mul f)
  (g : ring_seminorm Œ±) (hgpm : is_pow_mul g)
  (hfg : ‚àÉ (r : ‚Ñù) (hr : 0 < r), ‚àÄ (a : Œ±), f a ‚â§ r * g a)
  (hgf : ‚àÉ (r : ‚Ñù) (hr : 0 < r), ‚àÄ (a : Œ±), g a ‚â§ r * f a) : f = g :=
begin
  obtain ‚ü®r, hr0, hr‚ü© := hfg,
  obtain ‚ü®s, hs0, hs‚ü© := hgf,
  have hle : ring_hom.is_bounded_wrt f g (ring_hom.id _) := ‚ü®s, hs0, hs‚ü©,
  have hge : ring_hom.is_bounded_wrt g f (ring_hom.id _) := ‚ü®r, hr0, hr‚ü©,
  ext x,
  exact le_antisymm (contraction_of_is_pm_wrt g hfpm hge x)
    (contraction_of_is_pm_wrt f hgpm hle x), 
end

lemma eq_seminorms' {F : Type*}  {Œ± : out_param(Type*)} [ring Œ±] [ring_seminorm_class F Œ±]
  (f g : F) (hfpm : is_pow_mul f) (hgpm : is_pow_mul g)
  (hfg : ‚àÉ (r : ‚Ñù) (hr : 0 < r), ‚àÄ (a : Œ±), f a ‚â§ r * g a)
  (hgf : ‚àÉ (r : ‚Ñù) (hr : 0 < r), ‚àÄ (a : Œ±), g a ‚â§ r * f a) : f = g :=
begin
  obtain ‚ü®r, hr0, hr‚ü© := hfg,
  obtain ‚ü®s, hs0, hs‚ü© := hgf,
  have hle : ring_hom.is_bounded_wrt f g (ring_hom.id _) := ‚ü®s, hs0, hs‚ü©,
  have hge : ring_hom.is_bounded_wrt g f (ring_hom.id _) := ‚ü®r, hr0, hr‚ü©,
  rw ‚Üê function.injective.eq_iff (ring_seminorm_class.coe_injective'),
  ext x,
  exact le_antisymm (contraction_of_is_pm_wrt' g hfpm hge x)
    (contraction_of_is_pm_wrt' f hgpm hle x), 
end

variables {R S : Type*} [normed_comm_ring R] [comm_ring S] [algebra R S]

lemma is_pow_mul.restriction (A : subalgebra R S) {f : S ‚Üí ‚Ñù} (hf_pm : is_pow_mul f) :
  is_pow_mul (Œª x : A, (f x.val)) :=
Œª x n hn, by simpa [subtype.val_eq_coe,subsemiring_class.coe_pow] using (hf_pm ‚Üëx hn)

def algebra_norm.restriction (A : subalgebra R S) 
 (f : algebra_norm R S) : algebra_norm R A := 
{ to_fun    := Œª x : A, f x.val,
  map_zero' := map_zero f,
  add_le'   := Œª x y, map_add_le_add _ _ _,
  neg'      := Œª x, map_neg_eq_map _ _,
  mul_le'   := Œª x y, map_mul_le_mul _ _ _,
  eq_zero_of_map_eq_zero' := 
  Œª x hx, by {rw ‚Üê zero_mem_class.coe_eq_zero; exact eq_zero_of_map_eq_zero f hx},
  smul'      := Œª r x, map_smul_eq_mul _ _ _ }

-- Proposition 3.1.5/1
lemma eq_of_pow_mult_faithful (f‚ÇÅ : algebra_norm R S) (hf‚ÇÅ_pm : is_pow_mul f‚ÇÅ)
  (f‚ÇÇ : algebra_norm R S) (hf‚ÇÇ_pm : is_pow_mul f‚ÇÇ)
  (h_eq : ‚àÄ (y : S), ‚àÉ (C‚ÇÅ C‚ÇÇ : ‚Ñù) (hC‚ÇÅ : 0 < C‚ÇÅ) (hC‚ÇÇ : 0 < C‚ÇÇ), ‚àÄ (x : (algebra.adjoin R {y})), 
    f‚ÇÅ x.val ‚â§ C‚ÇÅ * (f‚ÇÇ x.val) ‚àß f‚ÇÇ x.val ‚â§ C‚ÇÇ * (f‚ÇÅ x.val) ) : 
  f‚ÇÅ = f‚ÇÇ := 
begin
  ext x,
  set g‚ÇÅ : algebra_norm R (algebra.adjoin R ({x} : set S)) := algebra_norm.restriction _ f‚ÇÅ,
  set g‚ÇÇ : algebra_norm R (algebra.adjoin R ({x} : set S)) := algebra_norm.restriction _ f‚ÇÇ,
  have hg‚ÇÅ_pm : is_pow_mul g‚ÇÅ := is_pow_mul.restriction _ hf‚ÇÅ_pm,
  have hg‚ÇÇ_pm : is_pow_mul g‚ÇÇ := is_pow_mul.restriction _ hf‚ÇÇ_pm,
  let y : algebra.adjoin R ({x} : set S) := ‚ü®x, algebra.self_mem_adjoin_singleton R x‚ü©,
  have hy : x = y.val := rfl,
  have h1 : f‚ÇÅ y.val = g‚ÇÅ y := rfl,
  have h2 : f‚ÇÇ y.val = g‚ÇÇ y := rfl,
  obtain ‚ü®C‚ÇÅ, C‚ÇÇ, hC‚ÇÅ_pos, hC‚ÇÇ_pos, hC‚ü© := h_eq x,
  obtain ‚ü®hC‚ÇÅ, hC‚ÇÇ‚ü© := forall_and_distrib.mp hC,
  rw [hy, h1, h2, eq_seminorms' g‚ÇÅ g‚ÇÇ hg‚ÇÅ_pm  hg‚ÇÇ_pm ‚ü®C‚ÇÅ, hC‚ÇÅ_pos, hC‚ÇÅ‚ü© ‚ü®C‚ÇÇ, hC‚ÇÇ_pos, hC‚ÇÇ‚ü©],
end